<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Bevy Engine</title>
	<link href="https://bevyengine.org/atom.xml" rel="self" type="application/atom+xml"/>
	<link href="https://bevyengine.org"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-08-19T00:00:00+00:00</updated>
	<id>https://bevyengine.org/atom.xml</id>
	<entry xml:lang="en">
		<title>Scaling Bevy</title>
		<published>2020-08-19T00:00:00+00:00</published>
		<updated>2020-08-19T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/scaling-bevy/" type="text/html"/>
		<id>https://bevyengine.org/news/scaling-bevy/</id>
		<content type="html">&lt;p&gt;First, I want to take a moment to highlight just how wild the last week has been. &lt;a href=&quot;&#x2F;news&#x2F;introducing-bevy&quot;&gt;&lt;strong&gt;Bevy was only released a week ago&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and we&#x27;ve already hit some pretty major milestones:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div style=&quot;display: flex; flex-wrap: wrap; width: 100%&quot;&gt;
    &lt;div style=&quot;max-width: 30rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt; 3rd most popular &#x2F;r&#x2F;rust post &lt;i&gt;of all time&lt;&#x2F;i&gt;&lt;&#x2F;h4&gt;
        &lt;img src=&quot;3rd_on_reddit.png&quot; style=&quot;display: block; height: 13rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 30rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;#2 on Hacker News&lt;&#x2F;h4&gt;
        &lt;img src=&quot;2nd_on_hacker_news.png&quot; style=&quot;display: block; height: 10rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;2,200 Github Stars&lt;&#x2F;h4&gt;
        &lt;img src=&quot;2_2k_stars.png&quot; style=&quot;display: block; height: 3rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;26 contributors&lt;&#x2F;h4&gt;
        &lt;img src=&quot;contributors.png&quot; style=&quot;display: block; height: 8rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 20rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4&gt;644 Discord Users&lt;&#x2F;h4&gt;
        &lt;img src=&quot;discord_users.png&quot; style=&quot;display: block; height: 6rem&quot;&#x2F;&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 21rem; max-height: 15rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h4 style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;37% of the way to making my full time Bevy development sustainable&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;&lt;img src=&quot;funding.png&quot; style=&quot;display: block; height: 6rem&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
    &lt;div style=&quot;max-width: 35rem; margin-right: 3rem; margin-bottom: 3rem&quot;&gt;
        &lt;h3 style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;awesome-bevy&quot;&gt;A truly awesome number of community-developed plugins, games, and apps&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
        &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;awesome-bevy&quot;&gt;&lt;img src=&quot;awesome.png&quot; style=&quot;display: block; height: 20rem&quot;&#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;how-can-bevy-operate-at-this-scale&quot;&gt;How can Bevy operate at this scale?&lt;&#x2F;h2&gt;
&lt;p&gt;I didn&#x27;t in my wildest dreams anticipate a community to show up so quickly and in such force. Clearly the Bevy project resonates with people! This is wonderful, but it also presents some interesting challenges that I thought I would have a lot more time to solve:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I am a bottleneck&lt;&#x2F;strong&gt;: Right now I am the only one with the right to merge code. This can&#x27;t change until people get ramped up and trust is built.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Everyone is fresh&lt;&#x2F;strong&gt;: Everyone is new to the codebase, so changes require a lot of scrutiny, and developers need a lot of guidance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No structure&lt;&#x2F;strong&gt;: We don&#x27;t have an organization or a well-defined development process.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before we try to solve these problems, I think we need to ask ourselves:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-made-bevy-good&quot;&gt;What made Bevy &amp;quot;good&amp;quot;?&lt;&#x2F;h3&gt;
&lt;p&gt;I think this is actually a relatively straightforward answer. I think it boils down to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Learn from the best&lt;&#x2F;strong&gt;: I thoroughly reviewed at all of the existing options, learned all I could from them, and either built something new based on those learnings or made iterative improvements&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Freedom to experiment&lt;&#x2F;strong&gt;: I was unencumbered by stability guarantees, pressure to make the &amp;quot;right&amp;quot; call every time, or deadlines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Focus&lt;&#x2F;strong&gt;: I was able to work on Bevy full time with zero distractions for ~5 months&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;How can we replicate this process at the new scale of the Bevy community? And how can I personally replicate this now that my job title has changed from &amp;quot;solo incognito moonshot project architect&amp;quot; to &amp;quot;lead architect&amp;quot; &#x2F; &amp;quot;project manager&amp;quot; &#x2F; &amp;quot;community manager&amp;quot; of a project with a developer community numbering in the thousands?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t think now is the time to get bogged down in complex organizational structures or RFC processes. Eventually we will need those tools, but I don&#x27;t think we&#x27;re there yet. Instead I&#x27;m going to try to re-create the conditions I&#x27;ve been operating under for the last five months:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bdfalaicmi&quot;&gt;BDFALAICMI&lt;&#x2F;h3&gt;
&lt;p&gt;I plan on being a &lt;strong&gt;B&lt;&#x2F;strong&gt;enevolent &lt;strong&gt;D&lt;&#x2F;strong&gt;ictator &lt;strong&gt;F&lt;&#x2F;strong&gt;or &lt;strong&gt;A&lt;&#x2F;strong&gt;s &lt;strong&gt;L&lt;&#x2F;strong&gt;ong &lt;strong&gt;A&lt;&#x2F;strong&gt;s &lt;strong&gt;I&lt;&#x2F;strong&gt; &lt;strong&gt;C&lt;&#x2F;strong&gt;an &lt;strong&gt;M&lt;&#x2F;strong&gt;anage &lt;strong&gt;I&lt;&#x2F;strong&gt;t. I will personally review every PR that gets merged and every design decision made. Eventually (if we do this right) that will become impossible, but we aren’t there yet. As I build trust in contributors and the project expands I will eventually start delegating. But I will always bias toward “small and focused”. My general skill-set and preference is to be a full time software developer &#x2F; architect, but I have accepted that I need to balance that with being a project and community manager. My short term goal will be to drive down our massive Issue and PR backlog :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;focus-focus-focus&quot;&gt;Focus Focus Focus&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;projects&#x2F;1&quot;&gt;We have a long road ahead of us&lt;&#x2F;a&gt;. Building an engine is a lot like leveling up a skill tree in a game. Some features can&#x27;t (or shouldn&#x27;t) be built until we have built their predecessors. An example of this is the Bevy Editor. Before we break ground on the editor, we need to make sure Bevy UI and Bevy Scenes are in a good spot. I am just one person. I have limited bandwidth to build designs and review proposals, so I can&#x27;t afford to waste energy on the editor yet.&lt;&#x2F;p&gt;
&lt;p&gt;At a given point in time, Bevy will have 3 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;labels&#x2F;focus-area&quot;&gt;focus areas&lt;&#x2F;a&gt;. These areas will receive priority for my time, and I will try my best to direct contributors to those areas. This doesn&#x27;t mean others aren&#x27;t free to explore other areas they are interested in. Just don&#x27;t expect to get them merged quickly. Ideally you&#x27;re building a standalone plugin that doesn&#x27;t require being directly merged into the Bevy repo anyway. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;fast-and-loose&quot;&gt;Fast and Loose&lt;&#x2F;h3&gt;
&lt;p&gt;I don&#x27;t want to get stuck in &amp;quot;design hell&amp;quot;. We can debate the best way to build a PBR renderer for years. But without implementations and hard data, it is very hard to determine what is &lt;em&gt;actually best in practice&lt;&#x2F;em&gt;. &lt;em&gt;I want to see code&lt;&#x2F;em&gt;. Production-readiness is a non-feature. A good idea is nice, but if there is no implementation it isn&#x27;t real to me. We need capable people to take good ideas and make them real. The faster we can try different approaches, the better. For now the general process will be:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Identify a focus area and communicate the general direction Bevy should be taking in this area&lt;&#x2F;li&gt;
&lt;li&gt;Encourage contributors to create their own &amp;quot;prototype&amp;quot; crates. In some cases I will create my own. The Bevy project will provide a centralized list of these crates, which will facilitate discover-ability and help consolidate efforts. If you make a crate, please use the &lt;code&gt;bevy_prototype_XXX&lt;&#x2F;code&gt; format for crate names to respect the &lt;code&gt;bevy_XXX&lt;&#x2F;code&gt; namespace. This approach will allow us to &amp;quot;scale out&amp;quot; without too much process or centralization.&lt;&#x2F;li&gt;
&lt;li&gt;Once we have working prototypes we can start to try building consensus. We can afford to take our time here. The prototype features will already be out there for the people that want them. The cost of merging something too early is high. Merging something is a signal that we have picked a path and are &lt;em&gt;committed to it&lt;&#x2F;em&gt;. At that point experimentation becomes costly and painful for Bevy crate consumers. For now I will have the final say on what gets merged and when it happens. It will be the job of the community to convince me to take a given path, but I promise I&#x27;m reasonable! And I will defer to subject matter experts when it makes sense.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;collaborate&quot;&gt;Collaborate&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy has caught the attention of many popular Rust projects. &lt;a href=&quot;https:&#x2F;&#x2F;community.amethyst.rs&#x2F;t&#x2F;bevy-engine-addressing-the-elephant-in-the-room&quot;&gt;We are currently discussing the best way to collaborate with Amethyst Engine&lt;&#x2F;a&gt;. I&#x27;m also talking to a number of other Rust project leads about the best way to make Bevy a good ecosystem player. As much as possible we should be building up common foundations. Please reach out to me (Twitter DMs or on Discord) if you know of potential collaboration areas. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-s-current-focus-areas&quot;&gt;Bevy&#x27;s Current Focus Areas&lt;&#x2F;h2&gt;
&lt;p&gt;Here are Bevy&#x27;s current focus areas. I will direct my attention and attempt to direct everyone elses&#x27; attention to them. There are no deadlines. We will take as long as we need to get them right. I will work as hard as I can (full-time) to ensure we make quick progress on them: &lt;&#x2F;p&gt;
&lt;h3 id=&quot;editor-ready-ui&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;254&quot;&gt;Editor-Ready UI&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before we can start work on the Bevy Editor, we need a solid UI implementation. Bevy UI already has nice &amp;quot;flexbox&amp;quot; layout, and we already have a first stab at buttons and interaction events. But Bevy UI still needs a lot more experimentation if we&#x27;re going to find the &amp;quot;right&amp;quot; patterns and paradigms. &lt;strong&gt;Editor-Ready UI&lt;&#x2F;strong&gt; has the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Embraces the Bevy architecture: Bevy ECS, Bevy Scenes, Bevy Assets, Bevy Events &lt;&#x2F;li&gt;
&lt;li&gt;A Canvas-style API for drawing widgets with shapes and anti-aliased curves&lt;&#x2F;li&gt;
&lt;li&gt;Define a consistent way to implement widgets&lt;&#x2F;li&gt;
&lt;li&gt;A core set of widgets: buttons, inputs, resizable panels, etc&lt;&#x2F;li&gt;
&lt;li&gt;Theme-ability&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Interaction&amp;quot; and &amp;quot;focus&amp;quot; events&lt;&#x2F;li&gt;
&lt;li&gt;Translation-friendly. We can&#x27;t be anglo-centric here&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Suggesting other UI frameworks or stacks is out of scope. The Bevy Editor &lt;em&gt;will be&lt;&#x2F;em&gt; built on top of Bevy UI. See the &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;&quot;&gt;Introducing Bevy&lt;&#x2F;a&gt; blog post for my rationale. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;physically-based-rendering-pbr&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;179&quot;&gt;Physically Based Rendering (PBR)&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;PBR is a standard-ish way of rendering realistically in 3D. There is both a lot of interest and a lot of brain-power in this area, so it makes sense to build PBR now. This focus area has the following (minimum) requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PBR Shaders (which implies hdr)&lt;&#x2F;li&gt;
&lt;li&gt;Bloom (to convey hdr)&lt;&#x2F;li&gt;
&lt;li&gt;Shadowing (forces us to build out a real &amp;quot;pipeline&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;Battle-test the current mid-level rendering abstractions and rework them where necessary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scenes&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&#x2F;255&quot;&gt;Scenes&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy Scenes currently do most of what we want, but they need a bit more work before they can be the foundation of Bevy state management. This focus area is also a requirement for the Bevy Editor.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Asset Management:&lt;&#x2F;strong&gt; Inline assets, asset dependencies, stable ids when loaded from the disk&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Better Scene Format:&lt;&#x2F;strong&gt; Improve the legibility and ergonomics of scene files to make them easy to read and easy to compose by hand. We&#x27;re shooting for something &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;close to this&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Enabling&#x2F;Disabling Systems:&lt;&#x2F;strong&gt; Scenes should be able to toggle their required systems on and off when they are added &#x2F; removed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;want-to-help&quot;&gt;Want to help?&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to hop on this wild ride with us, here are a few ways you can help:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Contribute To Prototype Plugins&lt;&#x2F;strong&gt;: Start building new prototype Bevy plugins and contribute to the one&#x27;s others are working on. Ideally in the focus areas above. At this point we are looking for fast prototypes that demonstrate new ideas. If you want to get started on a project within a given focus area:
&lt;ul&gt;
&lt;li&gt;Read through the corresponding &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;labels&#x2F;focus-area&quot;&gt;focus-area&lt;&#x2F;a&gt; issue on GitHub&lt;&#x2F;li&gt;
&lt;li&gt;Look for current projects in that issue and find potential collaboration areas.&lt;&#x2F;li&gt;
&lt;li&gt;If you can&#x27;t find an existing project and you want to start one, set up a new crate&#x2F;repo and link to it in the &amp;quot;focus-area&amp;quot; issue. We will maintain an index of active projects at the top of the thread. We will also encourage collaboration when it looks like there are overly-redundant efforts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Assist the Bevy Community&lt;&#x2F;strong&gt;: If you are able, help us resolve issues on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&quot;&gt;Bevy Issue Tracker&lt;&#x2F;a&gt;, review &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;pulls&quot;&gt;pull requests&lt;&#x2F;a&gt;, and provide help on the &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;channels&#x2F;691052431525675048&#x2F;742884593551802431&quot;&gt;#help channel of our Discord&lt;&#x2F;a&gt;. It is a real challenge to keep up with the sheer volume of work here, so any help is &lt;em&gt;very very&lt;&#x2F;em&gt; appreciated.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Help Me Make Full Time Development Sustainable&lt;&#x2F;strong&gt;: I need your help to make Bevy development sustainable! Five months ago I quit my comfortable Senior Software Engineer job at Microsoft to work on Bevy full time. I am currently paying my rent and living expenses out of pocket. I can&#x27;t sustain this for long, as much as I want to. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;cart&quot;&gt;We&#x27;re already 37% of the way to sustainable development&lt;&#x2F;a&gt; and it has only been two days!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I&#x27;m looking forward to seeing you in the &lt;a href=&quot;&#x2F;community&quot;&gt;Bevy Community&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introducing Bevy</title>
		<published>2020-08-10T00:00:00+00:00</published>
		<updated>2020-08-10T00:00:00+00:00</updated>
		<link href="https://bevyengine.org/news/introducing-bevy/" type="text/html"/>
		<id>https://bevyengine.org/news/introducing-bevy/</id>
		<content type="html">&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;hot_reloading.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After months of work, I am ecstatic to finally announce &lt;strong&gt;Bevy Engine&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Bevy is a refreshingly simple data-driven game engine and app framework built in Rust. It is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;free and open-source&lt;&#x2F;a&gt; forever!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It has the following design goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Capable&lt;&#x2F;b&gt;: Offer a complete 2D and 3D feature set&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Simple&lt;&#x2F;b&gt;: Easy for newbies to pick up, but infinitely flexible for power users&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Focused&lt;&#x2F;b&gt;: Data-oriented architecture using the Entity Component System paradigm &lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Modular&lt;&#x2F;b&gt;: Use only what you need. Replace what you don&#x27;t like&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Fast&lt;&#x2F;b&gt;: App logic should run quickly, and when possible, in parallel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive&lt;&#x2F;b&gt;: Changes should compile quickly ... waiting isn&#x27;t fun&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bevy has a number of features that I think set it apart from other engines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Bevy ECS&lt;&#x2F;b&gt;: A custom Entity Component System with unrivaled usability and blisteringly-fast performance&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Render Graphs&lt;&#x2F;b&gt;: Easily build your own multi-threaded render pipelines using Render Graph nodes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Bevy UI&lt;&#x2F;b&gt;: A custom ECS-driven UI framework built specifically for Bevy&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive Compile Times&lt;&#x2F;b&gt;: Expect changes to compile in ~0.8-3.0 seconds with the &amp;quot;fast compiles&amp;quot; config&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It also has many features most people expect from a modern, general purpose engine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Cross Platform&lt;&#x2F;b&gt;: Windows, MacOS, and Linux (with planned support for mobile and web)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;3D&lt;&#x2F;b&gt;: Lights, meshes, textures, MSAA, and GLTF loading&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Sprites&lt;&#x2F;b&gt;: Render individual images as sprites, render from sprite sheets, and dynamically generate new sprite sheets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Assets&lt;&#x2F;b&gt;: An extensible, event driven asset system that loads assets asynchronously in background threads&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Scenes&lt;&#x2F;b&gt;: Save ECS Worlds to human-readable scene files and load scene files into ECS Worlds&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Plugins&lt;&#x2F;b&gt;: All engine and app features are implemented as modular plugins&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Sound&lt;&#x2F;b&gt;: Load audio files as assets and play them from within systems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Multiple Render Backends&lt;&#x2F;b&gt;: Vulkan, DirectX 12, and Metal (with more on the way thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Driven Shaders&lt;&#x2F;b&gt;: Easily bind ECS components directly to shader uniforms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Hot Asset Reloading&lt;&#x2F;b&gt;: Automatically reload changes to assets at runtime without recompiles or restarts&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Events&lt;&#x2F;b&gt;: Efficiently consume and produce Events from within ECS systems&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Properties&lt;&#x2F;b&gt;: Dynamically get and set component fields using a string version of their names&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Hierarchical Transforms&lt;&#x2F;b&gt;: Create parent-child relationships between entities that propagate Transforms down the hierarchy &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That being said, Bevy is still in the very early stages. I consider it to be in the &amp;quot;prototyping&amp;quot; phase: features are missing, APIs will change, and documentation is sparse. &lt;span class=&quot;warning&quot;&gt;I don&#x27;t yet recommend using Bevy in serious projects unless you are willing to deal with gaps and instability&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully at this point you are either (1) jazzed about Bevy or (2) not reading anymore. If you want to dive in right now, &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt; is the best place to get started. You can also keep reading to find out what the current state of Bevy is and where we&#x27;d like to take it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Quick note to the reader&lt;&#x2F;strong&gt;: in this article you will find text formatted like this: &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;latest&amp;#x2F;bevy_render&amp;#x2F;texture&#x2F;struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This formatting indicates that the text is a Rust type that links to API documentation. I encourage you to click on anything that seems interesting to you!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-apps&quot;&gt;Bevy Apps&lt;&#x2F;h2&gt;
&lt;p&gt;First, lets see what a Bevy App actually looks like. The simplest App looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it! This App pulls in no features and literally does nothing. Running the program would just immediately terminate. We can make it a little more interesting by doing this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy&amp;#x2F;latest&amp;#x2F;bevy&#x2F;trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; adds all of the features you probably expect from a game engine: a 2D &#x2F; 3D renderer, asset loading, a UI system, windows, input, etc&lt;&#x2F;p&gt;
&lt;p&gt;You can also register the default &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;latest&amp;#x2F;bevy_app&#x2F;trait.Plugin.html&quot;&gt;&lt;code&gt;Plugins&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; manually like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;CorePlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;InputPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;WindowPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;UiPlugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* more plugins here ... omitted for brevity *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And of course you can also create your own plugins. In fact, all engine and game logic is built using plugins. Hopefully now you understand what we mean by modular: you are free to add&#x2F;remove plugins based on your project&#x27;s unique needs. However I expect that most people will stick to &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy&amp;#x2F;latest&amp;#x2F;bevy&#x2F;trait.AddDefaultPlugins.html#method.add_default_plugins&quot;&gt;&lt;code&gt;add_default_plugins()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; for simplicity, at least initially. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-ecs&quot;&gt;Bevy ECS&lt;&#x2F;h2&gt;
&lt;p&gt;All Bevy engine and game logic is built on top of a custom &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Entity_component_system&quot;&gt;Entity Component System&lt;&#x2F;a&gt; (or ECS for short). Entity Component Systems are a software paradigm that involves breaking data up into Components. Entities are unique ids assigned to groups of Components. For example, one entity might might have a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;Velocity&lt;&#x2F;code&gt; component, whereas another entity might have a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;UI&lt;&#x2F;code&gt; component. Systems are logic that runs on a specific set of component types. You might have a &lt;code&gt;movement&lt;&#x2F;code&gt; system that runs on all entities with a &lt;code&gt;Position&lt;&#x2F;code&gt; and &lt;code&gt;Velocity&lt;&#x2F;code&gt; component.&lt;&#x2F;p&gt;
&lt;p&gt;The ECS pattern encourages clean, decoupled designs by forcing you to break up your app data and logic into its core components.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike other Rust ECS implementations, which require complex lifetimes, traits, builder patterns, or macros, Bevy ECS uses normal Rust datatypes for all of these concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Components&lt;&#x2F;b&gt;: normal Rust structs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Systems&lt;&#x2F;b&gt;: normal Rust functions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Entities&lt;&#x2F;b&gt;: a type containing a unique integer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are already plenty of &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2rW7ALyHaas&quot;&gt;great introductions&lt;&#x2F;a&gt; to the ECS paradigm, so I&#x27;ll leave &amp;quot;getting up to speed on ECS&amp;quot; as an exercise for the reader and skip right to what makes Bevy&#x27;s ECS so special:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ergonomics&quot;&gt;Ergonomics&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;m going to make a wild (and unverifiable) claim here: Bevy ECS is the most ergonomic ECS &lt;em&gt;in existence&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;bevy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prelude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::*;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this system spawns entities with the Position and Velocity components
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    commands
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),));
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this system runs on each entity with a Position and Velocity component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the app entry point. hopefully you recognize it from the examples above!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_default_plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_startup_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is a complete self-contained Bevy app with automatic parallel system scheduling and global change detection. In my opinion, you &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;amethyst&#x2F;specs&#x2F;blob&#x2F;master&#x2F;examples&#x2F;basic.rs&quot;&gt;won&#x27;t&lt;&#x2F;a&gt; find &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TomGillen&#x2F;legion&quot;&gt;any&lt;&#x2F;a&gt; ECS &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leudz&#x2F;shipyard&#x2F;blob&#x2F;master&#x2F;bunny_demo&#x2F;src&#x2F;systems.rs&quot;&gt;with&lt;&#x2F;a&gt; better &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Unity-Technologies&#x2F;EntityComponentSystemSamples&#x2F;tree&#x2F;master&#x2F;ECSSamples&#x2F;Assets&#x2F;HelloCube&quot;&gt;clarity&lt;&#x2F;a&gt; or ergonomics. Building games (and engines) involves writing a large number of systems, so I heavily invested in making ECS code easy to write &lt;em&gt;and&lt;&#x2F;em&gt; easy to read.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h3&gt;
&lt;p&gt;One of the reasons the ECS paradigm is so popular is that it has the potential to make game logic &lt;em&gt;super&lt;&#x2F;em&gt; fast, primarily for these two reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Iteration Speed&lt;&#x2F;b&gt;: Components are packed tightly together to optimize for cache-locality, which makes iterating over them blazing fast&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Parallelism&lt;&#x2F;b&gt;: Systems declare read&#x2F;write dependencies, which enables automatic and efficient lock-free parallel scheduling&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Bevy ECS does both of these things about as well as it can. According to the popular &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; benchmark, Bevy ECS is the fastest Rust ECS by a pretty wide margin:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;system-iteration-in-nanoseconds-less-is-better&quot;&gt;System Iteration (in nanoseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ecs_iter.svg&quot; alt=&quot;ecs iter performance graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;world-setup-in-nanoseconds-less-is-better&quot;&gt;World Setup (in nanoseconds, less is better)&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ecs_build.svg&quot; alt=&quot;ecs iter performance graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; is a single threaded benchmark, so it doesn&#x27;t illustrate the multi-threading capabilities of these framework. And as always, please be aware that &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; is a micro benchmark and it doesn&#x27;t illustrate the performance of a complex game. There is a lot of nuance in the ECS performance space and each of the ECS implementations above will perform differently under different workloads. &lt;&#x2F;p&gt;
&lt;p&gt;I have pushed my version of &lt;code&gt;ecs_bench&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cart&#x2F;ecs_bench&quot;&gt;here&lt;&#x2F;a&gt; if anyone wants to double-check my methodology. For some reasonable amount of time I will post updates here if anyone reports a problem or my results are not (on average) reproducible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;features&quot;&gt;Features&lt;&#x2F;h3&gt;
&lt;p&gt;Now you might be thinking &amp;quot;Ok @cart, so Bevy ECS has great performance and ergonomics, but &lt;em&gt;surely&lt;&#x2F;em&gt; this means you had to compromise on features!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;... &lt;strong&gt;NOPE&lt;&#x2F;strong&gt; Bevy has you covered:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;for-each-systems&quot;&gt;For Each Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; &amp;quot;for each systems&amp;quot; run once on each entity containing the given components
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;query-systems&quot;&gt;Query Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this &amp;quot;query system&amp;quot; is the same as the system above, but gives you control over iteration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;change-detection&quot;&gt;Change Detection&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Added&amp;lt;T&amp;gt; queries only run when the given component has been added
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Mutated&amp;lt;T&amp;gt; queries only run when the given component has been mutated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mutated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Changed&amp;lt;T&amp;gt; queries only run when the given component has been added or mutated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Changed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; query.removed&amp;lt;T&amp;gt;() will iterate over every entity where the component T was removed this update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;removed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;multiple-queries&quot;&gt;Multiple Queries&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;wall_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Wall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; wall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; wall_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;collides_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;wall&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;ouch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;);
            }
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;entity-queries-and-direct-component-access&quot;&gt;Entity Queries and Direct Component Access&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;entity_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; player_query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Player&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;entity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the current entity has a player component
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Res and ResMut access global resources 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Score&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can use Resources in any system type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;local-system-resources&quot;&gt;&amp;quot;Local&amp;quot; System Resources&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Local&amp;lt;T&amp;gt; resources are unique per-system. Two instances of the same system will each have their own resource. Local resources are automatically initialized to their default value.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;empty-systems&quot;&gt;Empty Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; for the hyper-minimalists
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;with-without-filters&quot;&gt;With&#x2F;Without Filters&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; only runs on entities With or Without a given component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Without&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Parent, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;thread-local-systems&quot;&gt;Thread-Local Systems&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; systems that must run on the main thread with exclusive access to World and Resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; World, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Resources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;stages&quot;&gt;Stages&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the scheduler provides Stages as a way to run sets of systems in order  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; adds a system to the default stage: &amp;quot;update&amp;quot; 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;movement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; creates a new stage after &amp;quot;update&amp;quot;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_stage_after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;do_things&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system_to_stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;do_things&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;commands&quot;&gt;Commands&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; use Commands to queue up World and Resource changes, which will be applied at the end of the current Stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)));
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Commands can also be used alongside other types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;how-do-function-systems-work&quot;&gt;How Do Function Systems Work?&lt;&#x2F;h3&gt;
&lt;p&gt;Being able to use Rust functions directly as systems might feel like magic, but I promise it&#x27;s not! You may have noticed that we do this when registering systems in our App:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() { }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;some_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;.system()&lt;&#x2F;code&gt; call takes the &lt;code&gt;some_system&lt;&#x2F;code&gt; function pointer and converts it to a &lt;code&gt;Box&amp;lt;dyn System&amp;gt;&lt;&#x2F;code&gt;. This works because we implement the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;latest&amp;#x2F;bevy_ecs&#x2F;trait.IntoQuerySystem.html&quot;&gt;&lt;code&gt;IntoQuerySystem&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait for all functions that match a certain set of function signatures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;good-bones&quot;&gt;Good Bones&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy ECS actually uses a heavily forked version of the minimalist &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ralith&#x2F;hecs&quot;&gt;Hecs ECS&lt;&#x2F;a&gt;. Hecs is an efficient single-threaded archetypal ECS. It provides the core &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;latest&amp;#x2F;bevy_ecs&#x2F;struct.World.html&quot;&gt;&lt;code&gt;World&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;latest&amp;#x2F;bevy_ecs&#x2F;struct.Archetype.html&quot;&gt;&lt;code&gt;Archetype&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;, and internal &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ecs&amp;#x2F;latest&amp;#x2F;bevy_ecs&#x2F;trait.Query.html&quot;&gt;&lt;code&gt;Query&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; data structures. Bevy ECS adds the following on top:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Function Systems&lt;&#x2F;b&gt;: Hecs actually has no concept of a &amp;quot;system&amp;quot; at all. You just run queries directly on the World. Bevy adds the ability to define portable, schedulable systems using normal Rust functions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Resources&lt;&#x2F;b&gt;: Hecs has no concept of unique&#x2F;global data. When building games, this is often needed. Bevy adds a &lt;code&gt;Resource&lt;&#x2F;code&gt; collection and resource queries&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Parallel Scheduler&lt;&#x2F;b&gt;: Hecs is single threaded, but it was designed to allow parallel schedulers to be built on top. Bevy ECS adds a custom dependency-aware scheduler that builds on top of the &amp;quot;Function Systems&amp;quot; mentioned above.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Optimization&lt;&#x2F;b&gt;: Hecs is already plenty fast, but by modifying some of its internal data access patterns, we were able to improve performance significantly. This moved it from &amp;quot;fast enough&amp;quot; to &amp;quot;the fastest&amp;quot; (see the benchmark above to compare Bevy ECS to vanilla Hecs).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Query Wrappers&lt;&#x2F;b&gt;: The &lt;code&gt;Query&lt;&#x2F;code&gt; Bevy ECS exports is actually a wrapper around Hecs Queries. It provides safe, scoped access to the &lt;code&gt;World&lt;&#x2F;code&gt; in a multi-threaded context and improves the ergonomics of iteration.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Change Detection&lt;&#x2F;b&gt;: Automatically (and efficiently) tracks component add&#x2F;remove&#x2F;update operations and exposes them in the Query interface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Stable Entity IDs&lt;&#x2F;b&gt;: Almost every ECS (including Hecs) uses unstable entity ids that cannot be used for serialization (scenes &#x2F; save files) or networking. In Bevy ECS, entity ids are globally unique and stable. You can use them in any context!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the near future I will file an issue on the Hecs git repo offering to upstream whatever changes they want from Bevy ECS. I have a feeling they won&#x27;t want the &amp;quot;high level&amp;quot; stuff like function systems and parallel scheduling, but I guess we&#x27;ll see! &lt;&#x2F;p&gt;
&lt;h2 id=&quot;bevy-ui&quot;&gt;Bevy UI&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;bevy_ui.png&quot; alt=&quot;bevy ui&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bevy has a custom, but familiar UI system based on the &amp;quot;flex box&amp;quot; model. Well... semi-custom, but more on that later. In the beginning, I heavily considered using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hecrj&#x2F;iced&quot;&gt;one&lt;&#x2F;a&gt; of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;emigui&#x2F;&quot;&gt;many&lt;&#x2F;a&gt; great &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;pre-made&lt;&#x2F;a&gt; UI solutions in the Rust ecosystem. But each of these frameworks felt in some way &amp;quot;separate&amp;quot; from the data-driven ECS approach at the core of Bevy. If we took a framework like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linebender&#x2F;druid&quot;&gt;Druid&lt;&#x2F;a&gt;, which is top-of-its class in terms of design, and then shoe-horned it into the Bevy data &#x2F; event model, that would &lt;em&gt;compromise&lt;&#x2F;em&gt; the Druid design and Bevy+Druid would end up being less compelling than just using Druid as a standalone framework.&lt;&#x2F;p&gt;
&lt;p&gt;I decided that the only way Bevy could even &lt;em&gt;hope&lt;&#x2F;em&gt; to bring something compelling to the table was to fully embrace the Bevy way of doing things.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy UI directly uses the existing ECS, hierarchy, transform, event, asset, and scene systems at the core of Bevy. Because of this, Bevy UI automatically gets features like hot-reloading of UI scene files, async texture loading, and change detection. A shared architecture means that improvements to any of these systems feed directly into Bevy UI. I am not yet convinced that this approach will produce the best UI framework, but I &lt;em&gt;am&lt;&#x2F;em&gt; convinced that it will produce the best UI framework in the context of a Bevy App.&lt;&#x2F;p&gt;
&lt;p&gt;We are still in the experimental stages and I expect some things to change, but the patterns we&#x27;ve found so far are very promising. Also keep in mind that currently the best way to compose Bevy UIs is with code, but we are in the process of designing a new file format for scenes that should make declarative, file based UI composition much nicer than it currently is.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-blocks&quot;&gt;Building Blocks&lt;&#x2F;h3&gt;
&lt;p&gt;In Bevy, a UI element is just an ECS Entity with a &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;latest&amp;#x2F;bevy_ui&#x2F;struct.Node.html&quot;&gt;&lt;code&gt;Node&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component. Nodes are rectangles with a width and height, and are positioned using the same &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_transform&amp;#x2F;latest&amp;#x2F;bevy_transform&amp;#x2F;components&#x2F;struct.Transform.html&quot;&gt;&lt;code&gt;Transform&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component used elsewhere in Bevy. The &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;latest&amp;#x2F;bevy_ui&#x2F;struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component is used to determine how the Node is rendered, sized, and positioned.&lt;&#x2F;p&gt;
&lt;p&gt;The easiest way to add a new node (with all of the required components) is like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;latest&amp;#x2F;bevy_ui&amp;#x2F;entity&#x2F;struct.NodeComponents.html&quot;&gt;&lt;code&gt;NodeComponents&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; is a &amp;quot;component bundle&amp;quot;, which Bevy uses to make spawning entities of various &amp;quot;types&amp;quot; easier.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layout&quot;&gt;Layout&lt;&#x2F;h3&gt;
&lt;p&gt;For layout, Bevy uses a fantastic 100% Rust flexbox implementation called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vislyhq&#x2F;stretch&quot;&gt;Stretch&lt;&#x2F;a&gt;. Stretch provides the algorithms for positioning rectangles in 2D space according to the flexbox spec. Bevy exposes flex properties inside the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;latest&amp;#x2F;bevy_ui&#x2F;struct.Style.html&quot;&gt;&lt;code&gt;Style&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component mentioned above and renders rectangles with the positions and sizes that Stretch outputs. Bevy uses its own z-layering algorithm to &amp;quot;stack&amp;quot; elements on top of each other, but its basically the same one that HTML&#x2F;CSS uses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;relative-positioning&quot;&gt;Relative Positioning&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes are positioned relative to each other by default:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;relative_position.png&quot; alt=&quot;relative positioning&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;absolute-positioning&quot;&gt;Absolute Positioning&lt;&#x2F;h3&gt;
&lt;p&gt;You can &amp;quot;absolutely&amp;quot; position a Node relative to its parent&#x27;s corners like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;absolute_positioning.png&quot; alt=&quot;absolute positioning&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;40.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;parenting&quot;&gt;Parenting&lt;&#x2F;h3&gt;
&lt;p&gt;Just like any other Entity, Nodes can have children. Children are positioned and scaled relative to their parent. By default, children will always appear in front of their parents.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;ui_parenting.png&quot; alt=&quot;ui_parenting&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;60.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        parent
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;50.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            });
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;flexbox&quot;&gt;Flexbox&lt;&#x2F;h3&gt;
&lt;p&gt;I won&#x27;t cover how flexbox works here, but you can use all of the same &amp;quot;flex&amp;quot; properties you would use in a web context. Here is an example of how you would center two Nodes vertically and horizontally within their parent:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;flex.png&quot; alt=&quot;flex&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Percent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            justify_content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;JustifyContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            align_items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AlignItems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Center&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        parent
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            })
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;NodeComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                    size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;80.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),
                    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
                },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;rgb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            });
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;text-and-images&quot;&gt;Text and Images&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes can also have Text and Image components, which affect the inferred sizes of nodes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;text_and_image.png&quot; alt=&quot;text and images&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Hello from Bevy UI!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            font&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;FiraSans-Bold.ttf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; TextStyle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                font_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;25.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;WHITE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
            },
        },
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ImageComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;200.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PositionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Absolute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
            position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
                right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Px&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
                ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
            },
            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;bevy_logo.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;interaction-events&quot;&gt;Interaction Events&lt;&#x2F;h3&gt;
&lt;p&gt;Nodes with the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_ui&amp;#x2F;latest&amp;#x2F;bevy_ui&#x2F;enum.Interaction.html&quot;&gt;&lt;code&gt;Interaction&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; component will track interaction state. You can easily build widgets like buttons this way:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;button.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For example, here is a system that only runs on Buttons where the Interaction state has changed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;_button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Button, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Mutated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;interaction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Clicked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;clicked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Hovered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;hovered&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Interaction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&amp;gt; {},
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;2d-features&quot;&gt;2D Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sprites&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;2d&#x2F;sprite.rs&quot;&gt;Sprites&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can use any &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;latest&amp;#x2F;bevy_render&amp;#x2F;texture&#x2F;struct.Texture.html&quot;&gt;&lt;code&gt;Texture&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; asset as a sprite directly:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;sprite.png&quot; alt=&quot;sprite&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;icon.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SpriteComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;sprite-sheets&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;2d&#x2F;sprite_sheet.rs&quot;&gt;Sprite Sheets&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sprite sheets (also known as texture atlases) can be used for animations, tile sets, or just for optimized sprite rendering.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;sprite_sheet.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextureAtlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlases&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_atlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
commands
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SpriteSheetComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        texture_atlas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        sprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;TextureAtlasSprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;dynamic-texture-atlas-generation&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;2d&#x2F;texture_atlas.rs&quot;&gt;Dynamic Texture Atlas Generation&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sprites are often produced as individual files. Bevy can combine them into a single sprite sheet dynamically!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;dynamic_texture_atlas.png&quot; alt=&quot;dynamic texture atlas&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; sprite_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; sprite_handles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    texture_atlas_builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_atlas_builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;3d-features&quot;&gt;3D Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;gltf-model-loading&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;3d&#x2F;load_model.rs&quot;&gt;GLTF Model Loading&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Load GLTF files as Mesh assets &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;boat.png&quot; alt=&quot;boat render&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; load the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;boat.gltf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(),
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; create a material for the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; materials&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;boat.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()),
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: in the near future we will add support for loading GLTF files as Scenes instead of meshes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;depth-based-draw-order&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;3d&#x2F;texture.rs&quot;&gt;Depth Based Draw Order&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Front-to-back drawing for fast &amp;quot;early fragment discarding&amp;quot; of opaque materials, and back-to-front drawing for correct transparent materials&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;alpha.png&quot; alt=&quot;alpha&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parenting-1&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;3d&#x2F;parenting.rs&quot;&gt;Parenting&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Parent transforms are propagated to their descendants&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;parenting.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cube_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;with_children&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;| {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PbrComponents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        mesh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cube_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
        translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Translation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;),
        ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
    });
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;msaa&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;3d&#x2F;msaa.rs&quot;&gt;MSAA&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Get nice smooth edges by using Multi-Sample Anti-Aliasing&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;msaa_off.png&quot; alt=&quot;msaa_off&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;news&#x2F;introducing-bevy&#x2F;msaa_on.png&quot; alt=&quot;msaa_on&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Msaa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; samples&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;scenes&quot;&gt;Scenes&lt;&#x2F;h2&gt;
&lt;p&gt;Scenes are a way to compose pieces of your game&#x2F;app ahead of time. In Bevy, Scenes are simply a collection of entities and components. A Scene can be &amp;quot;spawned&amp;quot; into a &lt;code&gt;World&lt;&#x2F;code&gt; any number of times. &amp;quot;Spawning&amp;quot; copies the Scene&#x27;s entities and components into the given &lt;code&gt;World&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Scenes can also be saved to and loaded from &amp;quot;scene files&amp;quot;. One of the primary goals of the future &amp;quot;Bevy Editor&amp;quot; will be to make it easy to compose scene files visually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;file-format&quot;&gt;File Format&lt;&#x2F;h3&gt;
&lt;p&gt;Scene files are a saved and loaded as a flat list of entities and components:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;(
    entity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;328997855&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;},
      },
    ],
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;(
    entity: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;404566393&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;components: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;[
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;},
      },
      {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Carter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot; },
      },
    ],
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,
]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The numbers assigned to the &lt;code&gt;entity&lt;&#x2F;code&gt; fields are entity&#x27;s id, which are completely optional. If no entity id is provided, one will be randomly generated when the scene is loaded. We have &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;plans to improve this format&lt;&#x2F;a&gt; in the future to be more ergonomic, indent entity hierarchies, and support nested scenes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loading-and-instancing&quot;&gt;Loading and Instancing&lt;&#x2F;h3&gt;
&lt;p&gt;Scenes can be added to a &lt;code&gt;World&lt;&#x2F;code&gt; using the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;latest&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html&quot;&gt;&lt;code&gt;SceneSpawner&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource. Spawning can be done with either &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;latest&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html#method.load&quot;&gt;&lt;code&gt;SceneSpawner::load()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_scene&amp;#x2F;latest&amp;#x2F;bevy_scene&#x2F;struct.SceneSpawner.html#method.instance&quot;&gt;&lt;code&gt;SceneSpawner::instance()&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. &amp;quot;Loading&amp;quot; a Scene preserves the entity IDs in it. This is useful for something like a save file where you want entity ids to be constant and changes to be applied on top of entities already in the world. &amp;quot;Instancing&amp;quot; adds entities to the &lt;code&gt;World&lt;&#x2F;code&gt; with brand-new IDs, which allows multiple &amp;quot;instances&amp;quot; of a scene to exist in the same World.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_scene_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;SceneSpawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Scenes are loaded just like any other asset.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_scene.scn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Spawns the scene with entity ids preserved
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Spawns the scene with new entity ids
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    scene_spawner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;saving-ecs-worlds-to-scenes&quot;&gt;Saving ECS Worlds To Scenes&lt;&#x2F;h3&gt;
&lt;p&gt;Any ECS &lt;code&gt;World&lt;&#x2F;code&gt; can be converted to a scene like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;component_type_registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then convert the scene to a RON formatted string like this: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ron_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; scene&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;serialize_ron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;property_type_registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;hot-scene-reloading&quot;&gt;Hot Scene Reloading&lt;&#x2F;h3&gt;
&lt;p&gt;Changes to Scene files can be automatically applied to spawned Scenes at runtime. This allows for immediate feedback without restarts or recompiles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;hot_reloading.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that the video above is not sped up. Scene changes are effectively applied instantaneously.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-this-work&quot;&gt;How Does This Work?&lt;&#x2F;h3&gt;
&lt;p&gt;Scenes are built on top of Bevy&#x27;s Property and Asset systems. Components can be used in scenes provided they derive the &lt;code&gt;Properties&lt;&#x2F;code&gt; trait. Properties are what enable scene serialization, deserialization, and patching changes at runtime. Check out the next section for more details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;&#x2F;h2&gt;
&lt;p&gt;In a nutshell, Bevy Properties add some dynamism to Rust, which is a notoriously static language. It is often useful to get or set a struct&#x27;s field using a string version of its name, or interact with a struct when you don&#x27;t have a statically typed reference. Languages generally cover these cases with &amp;quot;reflection&amp;quot; features, but unfortunately Rust does not currently have this type of reflection. I built the &lt;code&gt;bevy_property&lt;&#x2F;code&gt; crate to provide a subset of useful &amp;quot;reflection-like&amp;quot; features in Rust. Here is a quick surface-level introduction:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can set a property value like this. The type must match exactly or this will fail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;set_prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can also set properties dynamically. set_prop accepts any type that implements the Property trait, but the property type must match the field type or this operation will fail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; new_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set_prop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new_count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; DynamicProperties also implements the Properties trait, but it has no restrictions on field names or types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; patch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;DynamicProperties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
patch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;set_prop_val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; You can &amp;quot;apply&amp;quot; Properties on top of other Properties. This will only set properties with the same name and type. You can use this to &amp;quot;patch&amp;quot; your properties with new values.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;patch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; Types that implement Properties can be converted to DynamicProperties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; dynamic_thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; DynamicProperties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_dynamic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Properties are what make Bevy&#x27;s Scene system so nice to use. I also plan to use them for features in the upcoming Bevy Editor, such as undo&#x2F;redo, viewing and editing component properties at runtime, and property animation tools.&lt;&#x2F;p&gt;
&lt;p&gt;Types that implement Properties can be serialized using &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;&quot;&gt;serde&lt;&#x2F;a&gt; and &lt;code&gt;DynamicProperties&lt;&#x2F;code&gt; can be deserialized using serde. When combined with the &lt;code&gt;Properties&lt;&#x2F;code&gt; patching feature, this means any type that derives &lt;code&gt;Properties&lt;&#x2F;code&gt; can be round trip serialized and deserialized.&lt;&#x2F;p&gt;
&lt;p&gt;To derive &lt;code&gt;Properties&lt;&#x2F;code&gt; each field in the struct must implement the &lt;code&gt;Property&lt;&#x2F;code&gt; trait. This is already implemented for most core Rust and Bevy types, so you should only need to implement &lt;code&gt;Property&lt;&#x2F;code&gt; for custom types (and you can derive &lt;code&gt;Property&lt;&#x2F;code&gt; too).&lt;&#x2F;p&gt;
&lt;p&gt;I have a feeling that the &lt;code&gt;bevy_property&lt;&#x2F;code&gt; crate will be useful in non-Bevy contexts, so I&#x27;ll be publishing it to crates.io in the near future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;events&quot;&gt;Events&lt;&#x2F;h2&gt;
&lt;p&gt;Bevy uses a double-buffered event system that enables efficient event production and consumption with zero-allocation event consumers. Here is a complete Bevy app that produces and consumes a custom event:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;event_producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;event_consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;event_producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() });
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;EventReader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;event_consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;my_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;received message: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;app.add_event::&amp;lt;MyEvent&amp;gt;()&lt;&#x2F;code&gt; adds a new &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;latest&amp;#x2F;bevy_app&#x2F;struct.Events.html&quot;&gt;&lt;code&gt;Events&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource for MyEvent and a system that swaps the &lt;code&gt;Events&amp;lt;MyEvent&amp;gt;&lt;&#x2F;code&gt; buffers every update.  &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_app&amp;#x2F;latest&amp;#x2F;bevy_app&#x2F;struct.EventReader.html&quot;&gt;&lt;code&gt;EventReaders&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; are very cheap to create. They are essentially just an array index that tracks the last event that has been read.&lt;&#x2F;p&gt;
&lt;p&gt;Events are used in Bevy for features like window resizing, assets, and input. The tradeoff for being both allocation and cpu efficient is that each system only has one chance to receive an event, otherwise it will be lost on the next update. I believe this is the correct tradeoff for apps that run in a loop (ex: games).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assets&quot;&gt;Assets&lt;&#x2F;h2&gt;
&lt;p&gt;Bevy &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;latest&amp;#x2F;bevy_asset&#x2F;struct.Assets.html&quot;&gt;&lt;code&gt;Assets&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; are just typed data that can be referenced using asset &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;latest&amp;#x2F;bevy_asset&#x2F;struct.Handle.html&quot;&gt;&lt;code&gt;Handles&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; . For example, 3d meshes, textures, fonts, materials, scenes, and sounds are assets. &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a generic collection of assets of type &lt;code&gt;T&lt;&#x2F;code&gt;. In general asset usage looks like this:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;asset-creation&quot;&gt;Asset Creation&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;create_texture_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; creates a new Texture asset and returns a handle, which can then be used to retrieve the actual asset
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-access&quot;&gt;Asset Access&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;read_texture_system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; retrieves a Texture using the current entity&amp;#39;s Handle&amp;lt;Texture&amp;gt; component
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-events&quot;&gt;Asset Events&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; collection is basically just a map from &lt;code&gt;Handle&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; to &lt;code&gt;T&lt;&#x2F;code&gt; that records created, modified, and removed &lt;code&gt;Events&lt;&#x2F;code&gt;. These events can also be consumed as a system resource, just like any other &lt;code&gt;Events&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;texture_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_events&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetEvent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Created &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;} =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;* do something with created asset *&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;asset-server&quot;&gt;Asset Server&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;Assets&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; collection doesn&#x27;t know anything about filesystems or multi-threading. This is the responsibility of the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;latest&amp;#x2F;bevy_asset&#x2F;struct.AssetServer.html&quot;&gt;&lt;code&gt;AssetServer&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; resource:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Commands, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ResMut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this will begin asynchronously loading &amp;quot;texture.png&amp;quot; in parallel 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;texture.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; the texture may not be loaded yet, but you can still add the handle as a component immediately.
    &#x2F;&#x2F; whenever possible, internal Bevy systems will wait for assets to be ready before using them:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; commands&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,));

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can also asynchronously load entire folders (recursively) by adding them as an &amp;quot;asset folder&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_asset_folder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; you can get the handle of any asset (either currently loading or loaded) like this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; music_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&#x2F;music.mp3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); 

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; when assets have finished loading, they are automatically added to the appropriate Assets&amp;lt;T&amp;gt; collection
    &#x2F;&#x2F; you can check if an asset is ready like this:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;texture_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; do something with texture
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; sometimes you want access to an asset immediately. you can block the current system until an asset has
    &#x2F;&#x2F; finished loading and immediately update Assets&amp;lt;T&amp;gt; using the &amp;quot;load_sync&amp;quot; method
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; cool_sprite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Texture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;  asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load_sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; textures&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;assets&#x2F;cool_sprite.png&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;hot-reloading&quot;&gt;Hot Reloading&lt;&#x2F;h4&gt;
&lt;p&gt;You can enable asset change detection by calling:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;watch_for_changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will load new versions of assets whenever their files have changed.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;adding-new-asset-types&quot;&gt;Adding New Asset Types&lt;&#x2F;h4&gt;
&lt;p&gt;To add a new asset type, implement the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_asset&amp;#x2F;latest&amp;#x2F;bevy_asset&#x2F;trait.AssetLoader.html&quot;&gt;&lt;code&gt;AssetLoader&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait. This tells Bevy what file formats to look for and how to translate the file bytes into the given asset type.&lt;&#x2F;p&gt;
&lt;p&gt;Once you have implemented &lt;code&gt;AssetLoader&amp;lt;MyAsset&amp;gt;&lt;&#x2F;code&gt; for &lt;code&gt;MyAssetLoader&lt;&#x2F;code&gt; you can register your new loader like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;add_asset_loader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyAsset, MyAssetLoader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you can access the &lt;code&gt;Assets&amp;lt;MyAsset&amp;gt;&lt;&#x2F;code&gt; resource, listen for change events, and call &lt;code&gt;asset_server.load(&amp;quot;something.my_asset&amp;quot;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sound&quot;&gt;Sound&lt;&#x2F;h2&gt;
&lt;p&gt;You can currently load and play sounds like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AssetServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; music&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;AudioSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; asset_server&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;music.mp3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(); 

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; this will play the music asynchronously as soon as it has loaded
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;play&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;music&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; if you already have an AudioSource reference you can play it immediately like this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;    audio_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;play_source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;audio_source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We plan on extending the audio system with more control and features in the future. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;render-graph&quot;&gt;Render Graph&lt;&#x2F;h2&gt;
&lt;p&gt;All render logic is built on top of Bevy&#x27;s &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;latest&amp;#x2F;bevy_render&amp;#x2F;render_graph&#x2F;struct.RenderGraph.html&quot;&gt;&lt;code&gt;RenderGraph&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt;. The Render Graph is a way to encode atomic units of render logic. For example, you might create graph nodes for a 2D pass, UI pass, cameras, texture copies, swap chains, etc. Connecting a node to another node indicates that there is a dependency of some kind between them. By encoding render logic this way, the Bevy renderer is able to analyze dependencies and render the graph in parallel. It also has the benefit of encouraging developers to write modular render logic.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy includes a number of nodes by default: &lt;code&gt;CameraNode&lt;&#x2F;code&gt;, &lt;code&gt;PassNode&lt;&#x2F;code&gt;, &lt;code&gt;RenderResourcesNode&lt;&#x2F;code&gt;, &lt;code&gt;SharedBuffersNode&lt;&#x2F;code&gt;, &lt;code&gt;TextureCopyNode&lt;&#x2F;code&gt;, &lt;code&gt;WindowSwapChainNode&lt;&#x2F;code&gt;, and &lt;code&gt;WindowTextureNode&lt;&#x2F;code&gt;. It also provides subgraphs for 2d rendering, 3d rendering, and UI rendering. But you are welcome to create your own nodes, your own graphs, or extend the included graphs!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-driven-shaders&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;Data Driven Shaders&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Components and Assets can derive the &lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;docs.rs&#x2F;bevy_render&amp;#x2F;latest&amp;#x2F;bevy_render&amp;#x2F;renderer&#x2F;trait.RenderResources.html&quot;&gt;&lt;code&gt;RenderResources&lt;&#x2F;code&gt;
&lt;&#x2F;a&gt; trait, which enables them to be directly copied to GPU resources and used as shader uniforms.&lt;&#x2F;p&gt;
&lt;p&gt;Binding uniforms to a custom shader is literally as simple as deriving &lt;code&gt;RenderResources&lt;&#x2F;code&gt; on your component or asset: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Color,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then adding a new RenderResourceNode to the Render Graph:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; create the new node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_system_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResourcesNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6364;&quot;&gt;&#x2F;&#x2F; connect the new node to the &amp;quot;main pass node&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add_node_edge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99c794;&quot;&gt;my_material&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MAIN_PASS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From there, MyMaterial components will be automatically copied to GPU buffers. A shader can then reference an entity&#x27;s MyMaterial like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;layout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt; binding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; uniform MyMaterial_color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    vec4 color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think the simplicity of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;fully self-contained custom shader example&lt;&#x2F;a&gt; speaks for itself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shader-defs&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;shader&#x2F;shader_defs.rs&quot;&gt;Shader Defs&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Components and Assets can also add &amp;quot;shader defs&amp;quot; to selectively enable shader code on a per-entity basis:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;RenderResources&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ShaderDefs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;MyMaterial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; Color,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;render_resource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)]
    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shader_def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;always_blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in your fragment shader you could do something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    o_Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;# ifdef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; MYMATERIAL_ALWAYS_BLUE
    o_Target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;vec4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f99157;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;# endif
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any entity with a &lt;code&gt;MyMaterial&lt;&#x2F;code&gt; component and &lt;code&gt;always_blue: true&lt;&#x2F;code&gt; will be rendered blue. If &lt;code&gt;always_blue&lt;&#x2F;code&gt; is false, it will be rendered with &lt;code&gt;color&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We currently use this feature for toggling &amp;quot;shadeless&amp;quot; rendering and optional textures, but I anticipate it being useful in a variety of contexts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shader-layout-reflection&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;shader&#x2F;shader_custom_material.rs&quot;&gt;Shader Layout Reflection&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy can automatically reflect shader data layouts from SpirV shaders (and from GLSL shaders by compiling them to SpirV). This means that creating custom shaders is as simple as this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b2c2f;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; shader_stages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; ShaderStages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; shaders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Shader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_glsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShaderStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Vertex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;VERTEX_SHADER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;)),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;
    fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fac863;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shaders&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Shader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;from_glsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;ShaderStage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;Fragment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;FRAGMENT_SHADER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;))),
};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c594c5;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; pipeline_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt; pipelines&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6699cc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;PipelineDescriptor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;default_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccece;&quot;&gt;shader_stages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5fb3b3;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;productive-compile-times&quot;&gt;Productive Compile Times&lt;&#x2F;h2&gt;
&lt;p&gt;One of my primary design goals for Bevy is &amp;quot;productivity&amp;quot;. Game development is an extremely iterative and experimental process full of small changes. If each change takes a significant amount of time to test, then development becomes a grind. Here is my personal &amp;quot;acceptability scale&amp;quot; for iterative changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;0-1 seconds&lt;&#x2F;b&gt;: ideal&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;1-3 seconds&lt;&#x2F;b&gt;: fine&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;3-5 seconds&lt;&#x2F;b&gt;: annoying&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;5-10 seconds&lt;&#x2F;b&gt;: painful but still usable if you are committed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;10+ seconds&lt;&#x2F;b&gt;: completely unusable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that these are &amp;quot;iterative compile times&amp;quot; not &amp;quot;clean compile times&amp;quot;. Clean compiles only need to happen once, whereas iterative compiles happen constantly. I care a lot less about the &amp;quot;clean compile&amp;quot; metric when it comes to productivity, although it is still important to keep clean compile times down for other reasons.&lt;&#x2F;p&gt;
&lt;p&gt;One of the most popular Rust engines today takes &lt;em&gt;over 30 seconds&lt;&#x2F;em&gt; to compile a single newline inserted into trivial examples. That is categorically unproductive and makes real game-dev practically impossible.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, with the &amp;quot;fast compiles&amp;quot; configuration, changes to Bevy examples can be compiled in ~0.8-3 seconds, based on your computer specs, configuration, and OS choice (more on this later). There is of course always room for improvement here, but Bevy currently falls into my &amp;quot;usability sweet spot&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The &amp;quot;Rust compiles slow&amp;quot; meme exists largely because many Rust projects aren&#x27;t thinking enough about the compile time performance implications of certain code patterns. Rust code generally compiles slowly for three reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Generic Monomorphization&lt;&#x2F;b&gt;: The compile step where generic code gets turned into a non-generic copy. Compile times go up as the volume of monomorphized code goes up. To keep costs low you should either avoid generics entirely or keep generic code &amp;quot;small&amp;quot; and shallow.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Link Time&lt;&#x2F;b&gt;: How long it takes to link code. Here the important thing is to keep code volume and dependency counts low.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;LLVM&lt;&#x2F;b&gt;: Rust throws a large amounts of IR code at LLVM and expects it to optimize it. This takes time. Additionally LLVM is optimized for &amp;quot;fast code at runtime&amp;quot; more than &amp;quot;fast code generation&amp;quot;. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The LLVM bit is out of our hands (for now). Keeping generic usage low and shallow isn&#x27;t a particularly hard problem, provided you employ that mindset from the beginning. Link times, on the other hand, are a constant and very real &amp;quot;enemy&amp;quot; of iterative compile times. Linking happens on every iterative compile. Adding any code to your project will increase link times. Adding any dependency to your project will increase link times.&lt;&#x2F;p&gt;
&lt;p&gt;The cards are stacked against us for a variety of reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;The Game Engine Domain&lt;&#x2F;b&gt;
&lt;ul&gt;
&lt;li&gt;Game engines inherently touch a large number of domains (and therefore involve a large number of dependencies)&lt;&#x2F;li&gt;
&lt;li&gt;Game engines are &amp;quot;big&amp;quot; ... they require a lot of code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Rust&#x27;s Design Choices&lt;&#x2F;b&gt;
&lt;ul&gt;
&lt;li&gt;Dependencies are statically linked by default, which means every new dependency adds link times &lt;&#x2F;li&gt;
&lt;li&gt;Rust&#x27;s default linker is quite slow&lt;&#x2F;li&gt;
&lt;li&gt;Cargo makes taking dependencies very easy. What appears to be a small, simple crate might actually have a large dependency tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One solution to this problem is to avoid dependencies at all costs and write the smallest amount of code that you can. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;macroquad&quot;&gt;Macroquad&lt;&#x2F;a&gt; project is a great example of this. They employ a minimalist approach to code and avoid any dependency that doesn&#x27;t meet their strict compile time requirements. As a result, I think its fair to say that they are the fastest compiling (while still usable) Rust game engine, both for clean and iterative compiles. However their approach comes at the cost of dependency aversion.&lt;&#x2F;p&gt;
&lt;p&gt;Bevy takes a slightly more pragmatic approach. First, being willing to take dependencies is good for the Rust ecosystem. I don&#x27;t want to ignore all of the great work that has already been done, especially when it comes to projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-windowing&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt;. But we still strive to keep our dependency tree as small as we can. And any dependency that takes Bevy out of the &amp;quot;ideal to fine&amp;quot; iterative compile time range must either be pared down or removed. When combined with the &amp;quot;Fast Compiles&amp;quot; configuration, this results in nice compile times.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-fast-compiles-configuration&quot;&gt;The &amp;quot;Fast Compiles&amp;quot; Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;The &amp;quot;fast compiles&amp;quot; configuration is how we achieve usable iterative compile times while still taking dependencies. It consists of three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;LLD linker&lt;&#x2F;b&gt;: LLD is &lt;em&gt;much faster&lt;&#x2F;em&gt; at linking than the default Rust linker. This is the biggest win.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Nightly Rust Compiler&lt;&#x2F;b&gt;: Gives access to the latest performance improvements and &amp;quot;unstable&amp;quot; optimizations. Note that Bevy can still be compiled on stable Rust if that is a requirement for you.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Generic Sharing&lt;&#x2F;b&gt;: Allows crates to share monomorphized generic code instead of duplicating it. In some cases this allows us to &amp;quot;precompile&amp;quot; generic code so it doesn&#x27;t affect iterative compiles.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To enable fast compiles, install the nightly rust compiler and LLD. Then copy &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;.cargo&#x2F;config_fast_builds&quot;&gt;this file&lt;&#x2F;a&gt; to &lt;code&gt;YOUR_WORKSPACE&#x2F;.cargo&#x2F;config&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;current-limitations-and-future-improvements&quot;&gt;Current Limitations and Future Improvements&lt;&#x2F;h3&gt;
&lt;p&gt;While Bevy is currently &amp;quot;productive&amp;quot; by my criteria, it isn&#x27;t all sunshine and rainbows yet. First, MacOS doesn&#x27;t have an up-to-date version of the LLD linker and therefore iterative compiles are &lt;em&gt;much&lt;&#x2F;em&gt; slower on that platform. Additionally, LLD is &lt;em&gt;slightly&lt;&#x2F;em&gt; slower on Windows than it is on Linux. On my machine I get ~1.5-3.0 seconds on Windows vs ~0.8-3.0 seconds on Linux.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dynamic-linking-to-the-rescue&quot;&gt;Dynamic Linking to the Rescue&lt;&#x2F;h4&gt;
&lt;p&gt;An easy way to cut down on link times is to just dynamically link instead. On my 2013 MacBook Pro running MacOS (with no LLD), I was able to drop iterative Bevy compile times from ~6 seconds to ~0.6 seconds by dynamically linking app plugins. Bevy actually already has support for dynamic App plugins, but the new Bevy ECS does not currently support dynamic linking because it relies on TypeIds (which are incompatible with dynamic linking). Fortunately, I have already solved the TypeId problem in other projects, so we should be able to add this back soon. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;cranelift-rustc-backend&quot;&gt;Cranelift Rustc Backend&lt;&#x2F;h4&gt;
&lt;p&gt;Cranelift is an alternative compiler backend that is optimized for fast compiles. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bjorn3&#x2F;rustc_codegen_cranelift&quot;&gt;rustc cranelift backend&lt;&#x2F;a&gt; is rapidly approaching a usable state. I&#x27;m hoping it will give us a nice boost eventually.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-game-breakout&quot;&gt;Example Game: Breakout&lt;&#x2F;h2&gt;
&lt;p&gt;If you are curious about what actual Bevy game code looks like, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;blob&#x2F;master&#x2F;examples&#x2F;game&#x2F;breakout.rs&quot;&gt;breakout example&lt;&#x2F;a&gt;. Forgive my slightly janky collision code please :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls loop&gt;&lt;source  src=&quot;breakout.mp4&quot; type=&quot;video&#x2F;mp4&quot;&#x2F;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-build-bevy&quot;&gt;Why Build Bevy?&lt;&#x2F;h2&gt;
&lt;p&gt;There are plenty of fantastic engines out there ... why build another one? Especially when there are already so many in the Rust ecosystem?&lt;&#x2F;p&gt;
&lt;p&gt;First a bit about me: I decided to build Bevy after years of contributing code to other engines (ex: Godot). I spent over four years &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;cartdev&quot;&gt;building a game in Godot&lt;&#x2F;a&gt; and I also have experience with Unity, Unreal, and a number of other frameworks like SDL and Three.js. I have built multiple custom engines in the past using Rust, Go, HTML5, and Java. I have also used and&#x2F;or closely followed most of the current players in the Rust gamedev ecosystem. I recently quit my job as Senior Software Engineer at Microsoft and my experience there deeply affected my opinions of software and what it should be.&lt;&#x2F;p&gt;
&lt;p&gt;These experiences led me to want the following from a game engine:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Free and Open Source&lt;&#x2F;b&gt;: It needs to be free and open source with &lt;em&gt;no strings attached&lt;&#x2F;em&gt;. Games are a huge part of our culture and humanity is investing &lt;em&gt;millions&lt;&#x2F;em&gt; of hours into the development of games. Why are we (as game developers &#x2F; engine developers) continuing to build up the ecosystems of closed-source monopolies that take cuts of our sales and deny us visibility into the tech we use daily? As a community I believe we can do so much better. This criteria eliminates Unreal and Unity, despite their huge feature sets.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Productive&lt;&#x2F;b&gt;: It needs to have fast build&#x2F;run&#x2F;test loops, which translates to either scripting languages or fast compile times in native languages. But scripting languages introduce runtime overhead, cognitive load, and a barrier between me and the actual engine, so my preference here is a native language with fast compile times. Sadly compile times are a huge problem in the Rust ecosystem and many Rust engines have prohibitively long iterative compiles. Fortunately Rust game engines like Macroquad and coffee prove that productive iterative compile times are possible.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Turtles All The Way Down&lt;&#x2F;b&gt;: Ideally the engine is written in the same language that games are. Being able to run an IDE &amp;quot;go to definition&amp;quot; command on a symbol in your game and hop directly into the engine source is an extremely powerful concept. You also don&#x27;t need to worry about heavy language translation layers or lossy abstractions. If an engine&#x27;s community builds games in the same language as the engine, they are more likely (and able) to contribute back to the engine.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Simple&lt;&#x2F;b&gt;: It needs to be easy to use for common tasks, but it also can&#x27;t hide the details from you. Many engines are either &amp;quot;easy to use but too high level&amp;quot; or &amp;quot;very low level but difficult to do common tasks in&amp;quot;. Additionally, many engines in Rust are littered with lifetimes and generics. Both are powerful tools to be sure, but they also introduce cognitive load and reduce ergonomics. Generics can also have a huge impact on compile times if you aren&#x27;t careful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Editor&lt;&#x2F;b&gt;: It needs to have an (optional) graphical editor. Scene creation is a large part of game development and in many cases visual editors beat code. As a bonus, the editor should be built &lt;em&gt;in the engine&lt;&#x2F;em&gt;. Godot uses this approach and it is &lt;em&gt;so smart&lt;&#x2F;em&gt;. Doing so &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Eating_your_own_dog_food&quot;&gt;dogfoods&lt;&#x2F;a&gt; the engine&#x27;s UI system and creates positive feedback loops. Improvements to the editor are also often improvements to the core engine. It also makes sure your engine is flexible enough to build tooling (and not just games). I personally consider building an engine&#x27;s editor in another stack to be a missed opportunity (ex: the web, QT, native widgets). &lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Data Driven&lt;&#x2F;b&gt;: It needs to be data-driven&#x2F;data-oriented&#x2F;data-first. ECS is a common way of doing this, but it definitely isn&#x27;t the only way. These paradigms can make your game faster (cache friendly, easier to parallelize), but they also make common tasks like game state serialization and synchronization delightfully straightforward.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;None of the engines on the market &lt;em&gt;quite&lt;&#x2F;em&gt; line up with what I&#x27;m looking for. And the changes required to make them meet my requirements are either massive in scope, impossible (closed source), or unwelcome (the things I want aren&#x27;t what the developers or customers want). On top of that, making new game engines is fun!&lt;&#x2F;p&gt;
&lt;p&gt;Bevy is not trying to out-compete other open-source game engines. As much as possible we should be collaborating and building common foundations. If you are an open source game engine developer and you think a Bevy component would make your engine better, one of your engine&#x27;s components could make Bevy better, or both, please reach out! Bevy is already benefitting massively from the efforts of the Rust gamedev ecosystem and we would love to pay it forward in whatever way we can.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s Next?&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m proud of how far Bevy has come in a relatively short period of time, but there is still plenty of work left to do. These will be our focus areas over the coming months:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;physically-based-rendering-pbr&quot;&gt;Physically Based Rendering (PBR)&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s current 3D renderer is extremely bare bones. As I primarily make 3D games, improving the 3D renderer is a priority for me. We will be adding PBR shaders, shadows, more lighting options, skeletal animation, improved GLTF import, ambient occlusion (implementation TBD), and probably a bunch of other things.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy was architected with a visual editor in mind. The Scene and Properties systems were specifically built to make game&amp;lt;-&amp;gt;editor dataflow nicer. The editor will be built as a Bevy App and will utilize the existing Bevy UI, Bevy ECS, Scene, and Properties features. I like the &amp;quot;build the editor in the engine&amp;quot; approach because improvements to the editor are often improvements to the engine, and vice-versa. Additionally, it ensures that Bevy is capable of building non-game apps and tooling.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;platform-support-android-ios-web&quot;&gt;Platform Support: Android, iOS, Web&lt;&#x2F;h3&gt;
&lt;p&gt;Under the hood Bevy uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-windowing&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt; (for multi-platform windows and input) and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gfx-rs&#x2F;wgpu-rs&quot;&gt;wgpu&lt;&#x2F;a&gt; (for multi-platform rendering). Each of these projects has varying degrees of support for the platforms above. And in general Bevy was designed to be platform-agnostic, so supporting the platforms above should be possible with a little bit of work.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;render-batching-and-instancing&quot;&gt;Render Batching and Instancing&lt;&#x2F;h3&gt;
&lt;p&gt;Right now Bevy can render plenty fast for most use cases, but when it comes to rendering huge amounts of objects (tens of thousands) it isn&#x27;t quite there yet. To accomplish that, we need to implement batching &#x2F; instancing. These concepts can be defined in a number of ways, but the general gist is that we will be grouping as much geometry and data into the smallest number of draw calls possible, while also reducing GPU state changes as much as possible. I&#x27;m hoping Bevy&#x27;s data driven shader approach will make the instancing implementation simple and extensible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;canvas&quot;&gt;Canvas&lt;&#x2F;h3&gt;
&lt;p&gt;Right now the only way to draw UI and 2D scenes is via sprites and rectangles. Bevy needs an immediate-mode drawing api capable of drawing anti-aliased curves and shapes. This can then be used to do code-driven drawing of things like rounded corners in Bevy UI, performance graphs in the editor, etc. It&#x27;s very possible that we will integrate projects like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;pathfinder&quot;&gt;pathfinder&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nical&#x2F;lyon&quot;&gt;lyon&lt;&#x2F;a&gt; for this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;animation&quot;&gt;Animation&lt;&#x2F;h3&gt;
&lt;p&gt;Animation permeates almost everything in gamedev. First, I want to add a general purpose code-first animation system. Then on top of that we will add a property-based timeline system that can be saved to a config file and visualized &#x2F; edited in the Bevy Editor.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nicer-scene-format&quot;&gt;Nicer Scene Format&lt;&#x2F;h3&gt;
&lt;p&gt;The current scene format is workable, but it isn&#x27;t yet ideal for manual scene composition because it is a flat list of unordered entities. I also want to add nested scenes. Eventually, I would like the scene format to &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;cart&#x2F;3e77d6537e1a0979a69de5c6749b6bcb&quot;&gt;look something like this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dynamic-plugin-loading&quot;&gt;Dynamic Plugin Loading&lt;&#x2F;h3&gt;
&lt;p&gt;To mitigate the cost of compiling and linking plugins and make hot-code-reloading possible, we will provide the option to dynamically load App plugins. Bevy actually already supports this feature, but there is one hangup: Rust&#x27;s &lt;code&gt;TypeId&lt;&#x2F;code&gt;. TypeIds are unstable across binaries, which means &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; in the host binary will not match &lt;code&gt;TypeId::of::&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; in a dynamically loaded binary. Bevy ECS uses TypeIds, which means dynamically loaded ECS types won&#x27;t behave correctly. In the past, Bevy used a custom fork of the Legion ECS (where we fixed the TypeId problem). But since moving to Bevy ECS the problem has resurfaced. The fix is to apply the same approach we used in Legion to Bevy ECS. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;physics&quot;&gt;Physics&lt;&#x2F;h3&gt;
&lt;p&gt;Many games require collision detection and physics. I&#x27;m planning on building a plug-able physics interface with &lt;a href=&quot;https:&#x2F;&#x2F;nphysics.org&#x2F;&quot;&gt;nphysics &#x2F; ncollide&lt;&#x2F;a&gt; as the first backend.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;polish&quot;&gt;Polish&lt;&#x2F;h3&gt;
&lt;p&gt;There are plenty of areas that need more design work or features. For example, I think the core Render Graph is in a pretty good state, but the mid-level and high level rendering APIs need more time and experimentation. I also want to rethink how materials are composed. If you are curious about all of the improvements on our radar, check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&#x2F;issues&quot;&gt;Bevy issue tracker on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h3&gt;
&lt;p&gt;Bevy&#x27;s APIs are still very unstable, so I haven&#x27;t spent much time documenting anything yet. &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt; is still small and the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bevy&quot;&gt;Rust API Docs&lt;&#x2F;a&gt; have plenty of gaps. In general I subscribe to the idea of &amp;quot;documentation proportional to stability&amp;quot;. As features stabilize and design patterns emerge, we will increase efforts in both of those areas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;join-the-bevy&quot;&gt;Join the Bevy!&lt;&#x2F;h2&gt;
&lt;p&gt;If any of this sounds interesting to you, I encourage you to check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bevyengine&#x2F;bevy&quot;&gt;Bevy on GitHub&lt;&#x2F;a&gt;, read &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;learn&#x2F;book&#x2F;introduction&#x2F;&quot;&gt;The Bevy Book&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;bevyengine.org&#x2F;community&#x2F;&quot;&gt;join the Bevy community&lt;&#x2F;a&gt;. Currently Bevy is 100% built by volunteers, so if you want to help us build the next great game engine, &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;gMUk5Ph&quot;&gt;please reach out&lt;&#x2F;a&gt;! We need all the help we can get, especially if you are a:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Software Developer&lt;&#x2F;b&gt;: check out the &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;contributing&#x2F;code&quot;&gt;Contributing Code&lt;&#x2F;a&gt; section of The Bevy Book.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b class=&quot;fun-list&quot;&gt;Technical Writer&lt;&#x2F;b&gt;: check out the &lt;a href=&quot;&#x2F;learn&#x2F;book&#x2F;contributing&#x2F;docs&quot;&gt;Contributing Docs&lt;&#x2F;a&gt; section of The Bevy Book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I want Bevy to become a vibrant developer community ... thats actually why I chose the name! A Bevy is a group of birds, just like we are a group of game developers. Join the Bevy!&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;assets&#x2F;bevy_logo_dark.svg&quot; style=&quot;height: 4.0rem; margin-top: 2.0rem&quot; &#x2F;&gt;
</content>
	</entry>
</feed>
